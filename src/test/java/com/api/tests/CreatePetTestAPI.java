package com.api.tests;

import io.qameta.allure.*;
import org.testng.annotations.Test;
import io.restassured.response.Response;
import org.testng.Assert;

import com.api.utils.ConfigManager;
import com.api.utils.TestDataGenerator;
import com.google.gson.Gson;
import com.google.gson.JsonObject;
import org.json.JSONObject;

import static io.restassured.RestAssured.*;
import static org.hamcrest.Matchers.*;

@Epic("Pet Management API")
@Feature("Pet Creation")
public class CreatePetTestAPI {

    @Test(description = "Verify single pet creation API is working using TestDataGenerator and matches expected response structure")
    @Story("As a user, I want to create a new pet and confirm its details are correctly reflected in the API response")
    @Severity(SeverityLevel.CRITICAL)
    @Owner("Chandan Agrawal")
    public void createSinglePetTest() {
        baseURI = ConfigManager.getProperty("baseURI");
        String createPetEndpoint = ConfigManager.getProperty("createPetEndpoint");

        System.out.println("CKA API Automation Framework - Loaded Base URI from config: " + baseURI);
        System.out.println("CKA API Automation Framework - Loaded Create Pet Endpoint from config: " + createPetEndpoint);

        JSONObject generatedPetPayloadOrgJson = TestDataGenerator.generatePetPayload();
        Gson gson = new Gson();
        JsonObject finalPetPayload = gson.fromJson(generatedPetPayloadOrgJson.toString(), JsonObject.class);

        System.out.println("CKA API Automation Framework - Generated Request Body:\n" + gson.toJson(finalPetPayload));

        Response response = given()
            .header("Content-Type", "application/json")
            .body(gson.toJson(finalPetPayload))
        .when()
            .post(createPetEndpoint)
        .then()
            .statusCode(200)
            .header("access-control-allow-headers", equalTo("Content-Type, api_key, Authorization"))
            .header("access-control-allow-methods", equalTo("GET, POST, DELETE, PUT"))
            .header("access-control-allow-origin", equalTo("*"))
            .header("content-type", containsString("application/json"))
            .header("server", equalTo("Jetty(9.2.9.v20150224)"))
            .header("date", notNullValue())
            .log().all()
            .extract().response();

        System.out.println("CKA API Automation Framework - Response Body:\n" + response.asPrettyString());

        // --- Assertions for Response Body ---

        // Assert 'id' is present and a number (dynamically generated by the server)
        Long responseId = response.jsonPath().getLong("id");
        Assert.assertNotNull(responseId, "Response should contain an 'id' for the created pet.");
        Assert.assertTrue(responseId > 0, "Response 'id' should be a positive number.");

        // Assert 'category' object and its properties using direct path access
        Assert.assertNotNull(response.jsonPath().get("category"), "Response should contain a 'category' object.");
        Assert.assertNotNull(response.jsonPath().get("category.id"), "Category should contain an 'id'."); // Corrected line 68
        Assert.assertNotNull(response.jsonPath().get("category.name"), "Category should contain a 'name'."); // Corrected line 69
        Assert.assertEquals(response.jsonPath().getInt("category.id"), finalPetPayload.get("category").getAsJsonObject().get("id").getAsInt(), "Created pet category ID should match the request.");
        Assert.assertEquals(response.jsonPath().getString("category.name"), finalPetPayload.get("category").getAsJsonObject().get("name").getAsString(), "Created pet category name should match the request.");

        // Assert 'name'
        Assert.assertNotNull(response.jsonPath().getString("name"), "Response should contain a 'name' field.");
        Assert.assertEquals(response.jsonPath().getString("name"), finalPetPayload.get("name").getAsString(), "Created pet name should match the request.");

        // Assert 'photoUrls' array
        Assert.assertNotNull(response.jsonPath().getList("photoUrls"), "Response should contain 'photoUrls' list.");
        Assert.assertFalse(response.jsonPath().getList("photoUrls").isEmpty(), "PhotoUrls list should not be empty.");
        Assert.assertEquals(response.jsonPath().getString("photoUrls[0]"), finalPetPayload.getAsJsonArray("photoUrls").get(0).getAsString(), "First photo URL should match the request.");

        // Assert 'tags' array
        Assert.assertNotNull(response.jsonPath().getList("tags"), "Response should contain 'tags' list.");
        Assert.assertFalse(response.jsonPath().getList("tags").isEmpty(), "Tags list should not be empty.");
        // Assert specific tag properties
        Assert.assertNotNull(response.jsonPath().get("tags[0].id"), "First tag should contain an 'id'."); // Corrected line 86
        Assert.assertNotNull(response.jsonPath().get("tags[0].name"), "First tag should contain a 'name'."); // Corrected line 87
        Assert.assertEquals(response.jsonPath().getInt("tags[0].id"), finalPetPayload.getAsJsonArray("tags").get(0).getAsJsonObject().get("id").getAsInt(), "First tag ID should match the request.");
        Assert.assertEquals(response.jsonPath().getString("tags[0].name"), finalPetPayload.getAsJsonArray("tags").get(0).getAsJsonObject().get("name").getAsString(), "First tag name should match the request.");

        // Assert 'status'
        Assert.assertNotNull(response.jsonPath().getString("status"), "Response should contain a 'status' field.");
        Assert.assertEquals(response.jsonPath().getString("status"), finalPetPayload.get("status").getAsString(), "Created pet status should match the request.");

        // Optional: Hamcrest assertions (can be used in addition or instead)
        response.then().body("id", notNullValue())
                       .body("name", equalTo(finalPetPayload.get("name").getAsString()))
                       .body("category.name", equalTo(finalPetPayload.get("category").getAsJsonObject().get("name").getAsString()))
                       .body("photoUrls", not(empty()))
                       .body("tags", not(empty()))
                       .body("status", equalTo(finalPetPayload.get("status").getAsString()));
    }
}